印尼地图送货数据同步系统部署指南（多维表格版）
=================================================

🎯 系统概述
----------
这是一个全自动化的送货地图系统，具备以下功能：
- 每日两次（09:00和14:00）自动从飞书多维表格读取送货数据
- 云端处理并更新GitHub仓库的CSV文件
- 前端地图实时显示当日送货地点
- 支持地图/卫星视图切换
- 显示店铺信息、电话、PO类型等送货详情

🏗️ 系统架构
-----------
飞书多维表格 → Render云服务(定时同步) → GitHub仓库 → Netlify前端地图

📋 第一步：飞书多维表格应用配置
===========================

1. 创建飞书应用
--------------
- 访问：https://open.feishu.cn/
- 登录飞书账号
- 创建"自建应用"
- 应用名称：送货地图数据同步
- 获取App ID和App Secret

2. 申请多维表格权限
----------------
在应用管理中申请以下权限：
✅ 查看、评论、编辑多维表格 (bitable:app)
✅ 管理多维表格 (bitable:app)

3. 获取多维表格信息
----------------
从飞书多维表格URL获取：
- App Token：URL中 bascnxxxxxxxxxxxxxxxxx 部分
- Table ID：具体数据表的 tblxxxxxxxxxxxxxxxxx 部分

4. 多维表格数据格式要求
--------------------
多维表格需包含以下字段（字段类型很重要）：

必需字段：
✅ 经度 (longitude) - 数字字段
✅ 纬度 (latitude) - 数字字段
✅ Nama Pemilik (店主姓名) - 单行文本字段
✅ 电话号码 (phone_number) - 单行文本字段
✅ PO type - 单选或多选字段
✅ 日期 (delivery_date) - 日期字段

字段特点：
🔸 经纬度必须是数字类型，不能是文本
🔸 单选/多选字段支持选项管理
🔸 日期字段用于筛选当日送货任务
🔸 支持富文本、附件等高级字段类型

📋 第二步：GitHub配置
==================

1. 创建Personal Access Token
---------------------------
- 访问 GitHub Settings → Developer settings → Personal access tokens
- 生成新Token，权限选择：
  ✅ repo (完整仓库访问权限)
  ✅ workflow (GitHub Actions权限)

2. 记录仓库信息
-------------
- 仓库所有者：你的GitHub用户名
- 仓库名称：当前项目仓库名

📋 第三步：Render部署
==================

1. 创建Web服务
------------
- 访问：https://render.com/
- 连接GitHub仓库
- 选择：feishu-sync-service 目录
- 服务类型：Web Service
- 环境：Node
- 构建命令：npm install
- 启动命令：npm start

2. 配置环境变量
-------------
在Render服务设置中添加以下环境变量：

飞书多维表格配置：
FEISHU_APP_ID=cli_xxxxxxxxxxxxxxxx
FEISHU_APP_SECRET=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
FEISHU_APP_TOKEN=bascnxxxxxxxxxxxxxxxxx
FEISHU_TABLE_ID=tblxxxxxxxxxxxxxxxxx

GitHub配置：
GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
GITHUB_REPO_OWNER=你的GitHub用户名
GITHUB_REPO_NAME=你的仓库名

其他配置：
NODE_ENV=production
PORT=3000

📋 第四步：Netlify部署前端
=======================

1. 连接GitHub仓库
---------------
- 访问：https://netlify.com/
- 从GitHub导入项目
- 构建设置：
  - 构建命令：npm run build
  - 发布目录：build
  - Node版本：18

2. 自动部署设置
-------------
启用GitHub自动部署：
- 每当CSV文件更新时，Netlify会自动重新部署
- 确保前端始终显示最新数据

🔧 系统运行流程
=============

定时同步过程：
1. 每日09:00和14:00（Jakarta时间），Render服务自动触发
2. 调用飞书多维表格API获取字段信息
3. 读取所有记录数据，支持复杂字段类型
4. 筛选当日送货数据（基于日期字段）
5. 处理单选/多选字段、文本字段等
6. 生成新的CSV文件内容
7. 通过GitHub API更新markers.csv文件
8. Netlify检测到文件变化，自动重新部署
9. 前端地图显示最新的送货地点

🔍 监控和管理
============

1. Render服务监控
---------------
- 服务URL：https://你的服务名.onrender.com
- 健康检查：GET /health
- 手动同步：POST /sync
- 状态查询：GET /status

2. 日志查看
----------
- Render控制台查看实时日志
- 监控同步成功/失败状态
- 查看字段映射和数据处理详情

3. 故障排查
----------
常见问题解决：
❌ 飞书API调用失败 → 检查多维表格应用权限和Token
❌ 字段读取失败 → 检查字段类型是否正确（经纬度必须是数字）
❌ GitHub更新失败 → 检查Token权限和仓库信息
❌ 没有当日数据 → 检查多维表格日期字段格式
❌ 坐标无效 → 检查经纬度数据类型和数值范围

🆚 多维表格 vs 普通表格优势
=========================

多维表格特有功能：
✨ 丰富的字段类型（单选、多选、日期、数字等）
✨ 字段数据验证和约束
✨ 更强的数据结构化能力
✨ 支持关联表格和引用
✨ 更好的移动端编辑体验
✨ 权限控制更精细

API技术差异：
🔧 使用bitable API端点而非sheets API
🔧 基于字段ID而非列索引访问数据
🔧 支持复杂字段类型的数据解析
🔧 更稳定的数据结构和类型系统

🎉 部署完成检查
=============

部署成功后验证：
✅ Render服务正常运行（访问服务首页显示多维表格服务信息）
✅ 手动触发同步成功（POST /sync返回成功）
✅ 字段映射正确（日志显示正确的字段ID映射）
✅ 数据类型处理正确（经纬度、日期、选项等）
✅ GitHub仓库CSV文件已更新
✅ Netlify前端正常显示地图和数据
✅ 定时任务已设置（日志显示定时器已启动）

🚀 使用方式
===========

日常使用：
1. 在飞书多维表格中添加/修改当日送货数据
2. 确保经纬度字段为数字类型，日期字段正确填写
3. 等待定时同步（09:00或14:00）或手动触发同步
4. 查看前端地图显示最新送货地点
5. 点击红色标记查看详细送货信息

系统特点：
🔄 全自动化，无需人工干预
📊 支持复杂数据类型和字段验证
📱 响应式设计，支持手机和电脑
🗺️ 支持标准地图和卫星视图
⭐ 总部位置固定显示（大号橙色五角星）
📍 用户位置定位功能
🚚 专为送货路线优化的界面设计
🛡️ 更强的数据完整性和类型安全

技术支持：
如遇问题，请检查Render服务日志中的字段映射信息
多维表格API提供更详细的错误信息和数据验证
系统每日自动清空数据并重新读取，确保显示最新信息 